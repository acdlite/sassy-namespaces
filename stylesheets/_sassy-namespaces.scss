@import "sassy-maps";

// Private map that holds the namespaces
$__sassy-namespaces: ();

// Add a key-value pair to an existing namespace, or to a new one if it doesn't already exist
// Returns the updated namespace map
@function namespace-set($name, $args...) {
  $length: length($args);
  $namespace: map-get($__sassy-namespaces, $name) or ($name: ());
  
  @if length($args) == 1 {
    @if type-of(nth($args, 1)) == map {
      $namespace: map-merge($namespace, nth($args, 1));
    } @else {
      @warn "Must pass either a map or a key and a value.";
    }
  }
  @else {
    $keys: nth($args, 1);
    
    @if length($keys) == 1 {
      $namespace: map-set($namespace, $args...);
    } @else {
      $namespace: map-set-deep($namespace, $args...);
    }
  }
  
  $__sassy-namespaces: map-merge($__sassy-namespaces, ($name: $namespace));
  @return $namespace;
}


// Return value for key of a namespace
// Returns null if key or namespace doesn't exist
@function namespace-get($name, $args...) {
  $length: length($args) + 1;
  $namespace: map-get($__sassy-namespaces, $name);
  
  @if not $namespace {
    @return null;
  }
  
  @if $length == 1 {
    @return $namespace;
  }
  @else if $length == 2 {
    $keys: nth($args, 1);
    
    @if length($keys) == 1 {
      @return map-get($namespace, $args...);
    } @else {
      @return map-get-deep($namespace, $args...);
    }
  }
  @else {
    @return null;
  }
}

@function namespace($name, $args...) {
  @return namespace-get($name, $args...) or namespace-set($name, $args...);
}

@mixin namespace-set($name, $args...) {
  $namespace: namespace-set($name, $args...);
}

@mixin namespace-get($name, $args...) {
  $namespace: namespace-get($name, $args...);
}

@mixin namespace($name, $args...) {
  $namespace: namespace($name, $args...);
}

@mixin namespace-create($name, $args...) {
  @include namespace-set($name, $args...);
}